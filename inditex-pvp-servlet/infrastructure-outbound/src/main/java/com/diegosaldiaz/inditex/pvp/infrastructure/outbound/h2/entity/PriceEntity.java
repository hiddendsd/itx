package com.diegosaldiaz.inditex.pvp.infrastructure.outbound.h2.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDateTime;
import java.util.Objects;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Price entity.
 */
@Entity
@Table(name = "price")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class PriceEntity {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private BigInteger id;

  @Column
  private long productId;

  @Column
  private int brandId;

  @Column
  private LocalDateTime startDate;

  @Column
  private LocalDateTime endDate;

  @Column
  private int priority;

  @Column
  private int priceList;

  @Column(scale = 20, precision = 2)
  private BigDecimal price;

  @Column
  private String currency;

  /**
   * Objects comparison.
   * Beyond basic comparison criterias about data type, the following rules apply to a DB entity:
   * - two instances with the same ID are equal, doesnt matter the value of the other fields
   * - two instances with null ID are not equal, doesnt matter if the other fields are all equals
   * - And instance with ID is not iqual to another instance with null ID, doesnt matter if the other fields are all equals
   * Lombok autogenerated methods doesnt follow these rules. That's why the method is customized.
   *
   * @param o Object to compare
   * @return boolean indicating whether both objects are equal or not.
   */
  @Override
  public boolean equals(final Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    final PriceEntity that = (PriceEntity) o;
    if (id != null && that.id != null) {
      return Objects.equals(id, that.id);
    }
    return false;
  }

  /**
   * Return the entity hash code.
   * The hash code must be always the same for any entity with the same ID.
   * The hash code must be always the same for any entity without ID
   * Lombok autogenerated methods doesnt follow these rules. That's why the method is customized.
   *
   * @return int with the hash code
   */
  @Override
  public int hashCode() {
    final int prime = 59;
    return prime + (id == null ? 43 : id.hashCode());
  }

  /**
   * Returns the user friendly string with the entity information.
   * Lombok autogenerated methods migh cause performance issues as they might cause undesirable loads of Lazy nested objects.
   * At this point, in this specific case of the PriceEntity, it can not happen because it doesnt have lazy loads, but the method
   * is manually generated as a best practice for all entities.
   *
   * @return String
   */
  @Override
  public String toString() {
    return "PriceEntity{"
        + "id=" + id
        + ", productId=" + productId
        + ", brandId=" + brandId
        + ", startDate=" + startDate
        + ", endDate=" + endDate
        + ", priority=" + priority
        + ", priceList=" + priceList
        + ", price=" + price
        + ", currency='" + currency + '\''
        + '}';
  }
}
